<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on Roopesh V S</title>
    <link>http://localhost:1313/pages/</link>
    <description>Recent content in Pages on Roopesh V S</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatically Scaling Down Lambda Provisioned Concurrency</title>
      <link>http://localhost:1313/pages/automatically-scaling-down-provisioned-concurrency/</link>
      <pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/pages/automatically-scaling-down-provisioned-concurrency/</guid>
      <description>If you are using AWS Lambdas to serve real-time traffic, and if your lambda initialization times are high, you might want to minimise the response time, and one of the options to do that is to utilise provisioned concurrency. Provisioned Concurrency is the number of pre-initialized execution environments allocated to your lambda function.&#xA;A constant Provisioned Concurrenct capacity of 200 for a 512 MB lambda for a month will cost ~1,116 USD!</description>
    </item>
    <item>
      <title>How Sherlock knows if you are on Facebook</title>
      <link>http://localhost:1313/pages/sherlock-facebook/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/pages/sherlock-facebook/</guid>
      <description>Sherlock is a CLI tool that can be used to find usernames across many social networks. In this post, I share how Sherlock was able to overcome a couple of hurdles in reliably finding if a username existed on Facebook. Sherlock works by having a JSON file as the source where a large collection of sites are listed with a few attributes.&#xA;A sample entry from the file looks like this:</description>
    </item>
  </channel>
</rss>
